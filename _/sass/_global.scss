/* Global */


//
// Global Mixins
//

$experimental: true !default;

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
@function emCalc($pxWidth) {
  @return $pxWidth / $em-base * 1em;
}

// We use this to control border radius.
@mixin radius($radius:$global-radius) {
  @if $radius {
    @if $experimental {
      -webkit-border-radius: $radius;
    }
    border-radius: $radius;
  }
}

// We use this to add css3 transitions.
@mixin transition() {
	-webkit-transition: (all .2s linear);
    -moz-transition: (all .2s linear);
    -o-transition: (all .2s linear);
    transition: (all .2s linear);
}

// We use this to add transitions to elements
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  @if $experimental {
    -webkit-transition: $property $speed $ease;
    -moz-transition: $property $speed $ease;
  }
  transition: $property $speed $ease;
}

// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  @if $experimental {
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
  }
  box-sizing: $type;
}

// We use this to create equilateral triangles
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// We use this to do clear floats
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}


// Set box-sizing globally to apply natural box sizing control
  *,
  *:before,
  *:after {
    @include box-sizing(border-box);
  }

// Override outline from normalize, we don't like it
a:focus { outline: none; }

// Responsive images and other embedded objects
img,
object,
embed { max-width: 100%; height: auto; }

object,
embed { height: 100%; }
img { -ms-interpolation-mode: bicubic; }

#map_canvas,
.map_canvas {
  img,
  embed,
  object { max-width: none !important;
  }
}

// Miscellaneous useful HTML classes
.left         { float: left !important; }
.right        { float: right !important; }
.text-left    { text-align: left !important; }
.text-right   { text-align: right !important; }
.text-center  { text-align: center !important; }
.text-justify { text-align: justify !important; }
.hide         { display: none; }

// Font smoothing
// Antialiased font smoothing works best for light text on a dark background.
// Apply to single elements instead of globally to body.
// Note this only applies to webkit-based desktop browsers on the Mac.
.antialiased { -webkit-font-smoothing: antialiased; }

// Get rid of gap under images by making them display: inline-block; by default
img {
  display: inline-block;
  vertical-align: middle;
}

//
// Global resets for forms
//

// Make sure textarea takes on height automatically
textarea { height: auto; min-height: 50px; }

// Make select elements 100% width by default
select { width: 100%; }